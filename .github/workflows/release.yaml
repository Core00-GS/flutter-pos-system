name: Draft Github Release

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      tag:
        description: "Draft a release in specific tag. Use current commit, will not create tag."
        required: false

  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

# Workflows:
# 1. Two condition, 'tag' event or 'workflow_dispatch' event
#    Both will check existence of changelog in the same build code
#      1. 'tag' - should be same with pubspec.yaml
#      2. 'workflow_dispatch' - no need to add tag
jobs:
  # Two condition, 'tag' event or 'workflow_dispatch' event
  # Both will check existence of changelog in the same build code
  #   1. 'tag' - should be same with pubspec.yaml
  #   2. 'workflow_dispatch' - no need to do
  # Outputs:
  #   1. `build_code` - pubspec.yaml build code.
  #   2. `tag` - tag name. No mater which event is, it should exist.
  check-version:
    name: Check pubspec.yaml version with tag
    runs-on: ubuntu-latest
    outputs:
      build_code: ${{ steps.pubspec_version.outputs.code }}
      tag: ${{ steps.tag.outputs.result }}
      tag_version: ${{ steps.pubspec_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Load pubspec version
        id: pubspec
        uses: CumulusDS/get-yaml-paths-action@v0.1.0
        with:
          file: pubspec.yaml
          version: version

      - name: Extract tag version name
        if: ${{ github.event_name != 'workflow_dispatch' }}
        id: tag_version
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            const version = context.payload.ref.replace(/\/?refs\/tags\/v/, '');
            const index = version.indexOf('-');

            return version.substr(0, index == -1 ? undefined : index);

      - name: Extract tag name
        id: tag
        uses: actions/github-script@v4
        with:
          result-encoding: string
          script: |
            return context.eventName === 'workflow_dispatch'
              ? '${{ github.event.inputs.tag }}'
              : context.payload.ref.replace(/\/?refs\/tags\//, '');

      - name: Extract pubspec version and code
        id: pubspec_version
        run: |
          PUBSPEC_VERSION=$(echo "${{ steps.pubspec.outputs.version }}" | cut -f1 -d"+")
          PUBSPEC_BUILD_CODE=$(echo "${{ steps.pubspec.outputs.version }}" | cut -f2- -d"+")
          echo "::set-output name=version::$PUBSPEC_VERSION"
          echo "::set-output name=code::$PUBSPEC_BUILD_CODE"

      - name: Check version
        if: ${{ github.event_name != 'workflow_dispatch' && steps.tag_version.outputs.result != steps.pubspec_version.outputs.version }}
        run: |
          echo '${{ steps.tag_version.outputs.result }} is not equal to ${{ steps.pubspec_version.outputs.version }}''
          exit 1

  # If pushing tag with '-rc' (release candidate), it should be fired.
  # If it is first RC tag, create pre-release
  rc-release:
    name: Create RC release
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ contains(needs.check-version.outputs.tag, '-rc') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Changelog
        id: build_changelog
        if: ${{ endsWith(needs.check-version.outputs.tag, '-rc1') }}
        uses: mikepenz/release-changelog-builder-action@v1
        with:
          configuration: "release.config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Draft release with changelog
        if: ${{ endsWith(needs.check-version.outputs.tag, '-rc1') }}
        uses: actions/create-release@v1
        with:
          tag_name: ${{ needs.check-version.outputs.tag }}
          release_name: v${{ needs.check-version.outputs.tag_version }}
          body: ${{ steps.build_changelog.outputs.changelog }}
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # If pushing released tag (vX.X.X), it should be fired.
  # Should build some artifacts, see below.
  get-release:
    name: Get release
    runs-on: ubuntu-latest
    needs: check-version
    if: ${{ !contains(needs.check-version.outputs.tag, '-rc') }}
    outputs:
      upload_url: ${{ steps.get_release.outputs.upload_url }}
      asset_length: ${{ steps.get_release.outputs.asset_length }}
      changelog: ${{ steps.get_release.outputs.changelog }}
    steps:
      # escape special characters
      # https://github.com/actions/toolkit/issues/403
      - name: Get Changelog from rc1
        id: get_release
        run: |
          data=$(curl -s \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H 'Accept: application/vnd.github.v3+json' \
            https://api.github.com/repos/evan361425/flutter-pos-system/releases/tags/${{ needs.check-version.outputs.tag }})
          if [ "$(echo "$data" | jq -r '.message')" = "Not Found" ]; then
            data=$(curl -s \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H 'Accept: application/vnd.github.v3+json' \
              https://api.github.com/repos/evan361425/flutter-pos-system/releases/tags/${{ needs.check-version.outputs.tag }}-rc1)
            curl -X PATCH \
              -H 'Accept: application/vnd.github.v3+json' \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -d '{"tag_name":"${{ needs.check-version.outputs.tag }}"}' \
              "https://api.github.com/repos/evan361425/flutter-pos-system/releases/$(echo "$data" | jq -r '.id')"
          fi

          [ "$(echo "$data" | jq -r '.message')" = "Not Found" ] && exit 1

          body="$(echo "$data" | jq -r '.body')"
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo "::set-output name=changelog::$body"
          echo "::set-output name=upload_url::$(echo "$data" | jq '.upload_url')"
          echo "::set-output name=asset_length::$(echo "$data" | jq '.assets | length')"

  # Push changelog to repository
  add-changelog:
    name: Add changelog to Fastlane
    runs-on: ubuntu-latest
    needs:
      - get-release
      - check-version
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          ref: 'master'

      - name: Push to GitHub
        run: |
          test -f "${{ needs.check-version.outputs.build_code }}.txt" && exit 0
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          echo "${{ needs.get-release.outputs.changelog }}" > android/fastlane/metadata/android/zh-TW/changelogs/${{ needs.check-version.outputs.build_code }}.txt
          git add --all
          git commit . -m "changelog(android): ${{ needs.check-version.outputs.build_code }}"
          git push

  # Build APK to release, only work if you using tag.
  # End of workflows in PROD mode.
  create-asset:
    name: Create Android build
    runs-on: ubuntu-latest
    needs:
      - get-release
      - check-version
    if: ${{ needs.get-release.outputs.asset_length == '0' }}
    steps:
      - name: Get flavor
        id: flavor
        uses: haya14busa/action-cond@v1
        with:
          cond: ${{ contains(needs.check-version.outputs.tag, '-rc') }}
          if_true: dev
          if_false: prod

        # Setup Java environment in order to build the Android app.
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      # Setup the flutter environment.
      - name: Set up Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      # Checkout code.
      - name: Checkout code
        uses: actions/checkout@v2

      # Recreate missing files, and get packages.
      - name: Build dependencies
        run: flutter pub get

      - name: Configure Firebase
        run: |
          mkdir -p ${{ steps.flavor.outputs.value }}
          echo "$GOOGLE_SERVICES" > ${{ steps.flavor.outputs.value }}/google-services.json
        env:
          GOOGLE_SERVICES: ${{ steps.flavor.outputs.value == 'dev' && secrets.GOOGLE_SERVICES_DEV || secrets.GOOGLE_SERVICES_PROD }}
        working-directory: android/app/src

      - name: Configure Play Store
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - name: Start building
        run: |
          flutter build -v apk --release --flavor ${{ steps.flavor.outputs.value }}
          mv build/app/outputs/flutter-apk/app-${{ steps.flavor.outputs.value }}-release.apk \
            $GITHUB_WORKSPACE/pos_system.apk

      # Upload the build.
      - name: Add packaged build to release
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.get-release.outputs.upload_url }}
          asset_path: ./pos_system.apk
          asset_name: pos_system.${{ steps.flavor.outputs.value }}.apk
          asset_content_type: application/vnd.android.package-archive

  # If any of needs job success, it will be fired
  # Make "Deploy to Play Store" action able to listen workflow_run
  final-job:
    name: Final job
    runs-on: ubuntu-latest
    needs:
      - rc-release
      - create-asset
    # allow canceled and success
    if: ${{ always() && !contains(needs.*.result, 'failure') }}
    steps:
      - run: echo '${{ needs.*.result }}'
