name: Draft Github Release

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - "v*" # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  generate-changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    steps:
      # - name: Get latest published release tag
      #   id: get_latest_release
      #   uses: pozetroninc/github-action-get-latest-release@v0.5.0
      #   with:
      #     repository: ${{ github.repository }}
      #     excludes: prerelease, draft
      - name: Generate changelog since last published release
        uses: charmixer/auto-changelog-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          future_release: ${{ github.ref }}
          # since_tag: ${{ steps.get_latest_release.outputs.release }}
      - name: Upload changelog
        uses: actions/upload-artifact@v2
        with:
          name: changelog
          path: CHANGELOG.md

  draft-release:
    name: Draft Github release
    needs: generate-changelog
    runs-on: ubuntu-20.04
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Download changelog
        uses: actions/download-artifact@v2
        with:
          name: changelog
      - name: Draft release with changelog
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: POS System ${{ github.ref }}
          body_path: CHANGELOG.md
          draft: true
          prerelease: false

  configure-firebase:
    name: Configure Firebase
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        target: [development, production]
        include:
          - target: development
            secret_env: FIREBASE_SECRET_DEV
            folder_prefix: dev
          - target: production
            secret_env: FIREBASE_SECRET_RELEASE
            folder_prefix: prod
    needs: draft-release
    steps:
      - name: Configure Firebase
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase=$FIREBASE_SECRET \
            --output ${{ matrix.folder_prefix }}/services.tar \
            ${{ matrix.folder_prefix }}/services.tar.gpg
          tar xvf ${{ matrix.folder_prefix }}/services.tar
        env:
          FIREBASE_SECRET: ${{ secrets[matrix.secret_env] }}
        working-directory: android/app/src

  create-build:
    name: Create Android build
    runs-on: ubuntu-20.04
    needs: configure-firebase
    steps:
      # Setup Java environment in order to build the Android app.
      - uses: actions/setup-java@v1
        with:
          java-version: "12.x"

      # Setup the flutter environment.
      - name: Clone Flutter repository with master channel
        uses: subosito/flutter-action@v1.5.0
        with:
          channel: master
      - run: flutter doctor -v

      # Checkout code.
      - name: Checkout code
        uses: actions/checkout@v2

      # Recreate missing files, and get packages.
      - name: Build dependencies
        run: |
          flutter create .
          flutter pub get
          flutter pub run build_runner build

      - name: Configure Play Store
        run: |
          echo "$PLAY_STORE_UPLOAD_KEY" | base64 --decode > app/upload-keystore.jks
          echo "storeFile=upload-keystore.jks" >> key.properties
          echo "keyAlias=$KEYSTORE_KEY_ALIAS" >> key.properties
          echo "storePassword=$KEYSTORE_STORE_PASSWORD" >> key.properties
          echo "keyPassword=$KEYSTORE_KEY_PASSWORD" >> key.properties
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          KEYSTORE_KEY_ALIAS: ${{ secrets.KEYSTORE_KEY_ALIAS }}
          KEYSTORE_KEY_PASSWORD: ${{ secrets.KEYSTORE_KEY_PASSWORD }}
          KEYSTORE_STORE_PASSWORD: ${{ secrets.KEYSTORE_STORE_PASSWORD }}
        working-directory: android

      # Build the application.
      - run: flutter build -v apk --release

      - name: Rename build for Android
        run: mv app-release.apk $GITHUB_WORKSPACE/pos_system.apk
        working-directory: build/app/outputs/flutter-apk

      # Upload the build.
      - name: Add packaged build to release draft
        id: upload_release_asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.draft-release.outputs.upload_url }}
          asset_path: ./pos_system.apk
          asset_name: pos_system.apk
          asset_content_type: application/vnd.android.package-archive
